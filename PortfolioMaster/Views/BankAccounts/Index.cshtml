@model IEnumerable<PortfolioMaster.Models.ViewModels.BankAccountViewModel>
@{
    ViewData["Title"] = "Bank Accounts";
    var avgInterestRates = Model.Average(m => m.InterestRate);
    var sumContributed = Model.Sum(m => m.AssetHoldings.Sum(h => h.TransactionType == TransactionType.Purchase ? h.Price : -h.Price));
    var sumValueToDate = Model.Sum(m => m.TotalValue);
    var sumCollectedInterests = Model.Sum(m => m.TotalValue - m.AssetHoldings.Sum(h => h.TransactionType == TransactionType.Purchase ? h.Price : -h.Price));
    var sumAnnualInterests = Model.Sum(m => m.TotalValue * (m.InterestRate / 100));
}

<h1>@ViewData["Title"]</h1>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Interest Rate %</th>
            <th>Contributed (USD)</th>
            <th>Value To Date (USD)</th>
            <th>Collected Interests (USD)</th>
            <th>Annual Interests (USD)</th>
        </tr>
    </thead>
    <tbody>
        @{
            var simpleAssetHoldingsList = Model.Select(item => item.AssetHoldings.Select(h => new
            {
                transactionDate = h.TransactionDate,
                transactionType = h.TransactionType,
                price = h.Price
            }).ToList());
        }
        @foreach (var item in Model)
        {
            @await Html.PartialAsync("_BankAccountTable", item)
        }
        <tr>
            <td><strong>Total</strong></td>
            <td>@Html.DisplayFor(_ => avgInterestRates) %</td>
            <td>$@Html.DisplayFor(_ => sumContributed)</td>
            <td>$@Html.DisplayFor(_ => sumValueToDate)</td>
            <td>$@Html.DisplayFor(_ => sumCollectedInterests)</td>
            <td>$@Html.DisplayFor(_ => sumAnnualInterests)</td>
        </tr>
    </tbody>
</table>

<div class="mt-3">
    <a asp-action="Create" class="btn btn-success">Add Account</a>
</div>
</br>
<h2>Modify Bank Accounts</h2>

<form id="updateForm" method="post" asp-action="UpdateTotalValue" asp-controller="BankAccounts">
    <table id="bankAccountsTable" class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Interest Rate %</th>
                <th>Value To Date (USD)</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        <input id="name-@item.Id" asp-for="@item.Name" class="form-control" />
                        <span asp-validation-for="@item.Name" class="text-danger"></span>
                    </td>
                    <td>
                        <input id="interestRate-@item.Id" asp-for="@item.InterestRate" class="form-control" />
                        <span asp-validation-for="@item.InterestRate" class="text-danger"></span>
                    </td>
                    <td>
                        <input id="totalValue-@item.Id" asp-for="@item.TotalValue" class="form-control" />
                        <span asp-validation-for="@item.TotalValue" class="text-danger"></span>
                    </td>
                    <td>
                        <button type="button" class="btn btn-primary" onclick="submitUpdate('@item.Id', '@item.Name')">Submit</button>
                        <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger">Delete</a>
                    </td>
                </tr>
            }
            <tr>
                <td><strong>Total</strong></td>
                <td>@Html.DisplayFor(_ => avgInterestRates) %</td>
                <td>$@Html.DisplayFor(_ => sumValueToDate)</td>
                <td></td>
            </tr>
        </tbody>
    </table>
    <input type="hidden" id="hiddenId" name="Id" />
    <input type="hidden" id="hiddenName" name="Name" />
    <input type="hidden" id="hiddenInterestRate" name="InterestRate" />
    <input type="hidden" id="hiddenTotalValue" name="TotalValue" />
    <input type="hidden" id="hiddenAssetHoldings" name="AssetHoldings" />
</form>

<style>
    .clickable-row {
        cursor: pointer;
    }

    .chevron-icon {
        transition: transform 0.25s;
    }

    .chevron-icon.rotate {
        transform: rotate(180deg);
    }
</style>

@section Scripts {
    <script>
        function toggleRow(chevron) {
            const icon = chevron.querySelector(".chevron-icon");
            icon.classList.toggle("rotate");
        }
        function submitUpdate(id, name) {
            var changedName = document.getElementById('name-' + id).value;
            var interestRate = document.getElementById('interestRate-' + id).value;
            var totalValue = document.getElementById('totalValue-' + id).value;

            document.getElementById('hiddenId').value = id;
            document.getElementById('hiddenName').value = changedName;
            document.getElementById('hiddenInterestRate').value = interestRate;
            document.getElementById('hiddenTotalValue').value = totalValue;
            document.getElementById('hiddenAssetHoldings').value = {};
            document.getElementById('updateForm').submit();
        }
        function generateCumulativeContributionsChart(elementId, assetHoldings) {
            // Prepare data for the chart
            assetHoldings.sort((a, b) => new Date(a.transactionDate) - new Date(b.transactionDate));

            var dates = [];
            var cumulativeContributions = [];
            var cumulativeSum = 0;

            assetHoldings.forEach(assetHolding => {
                var date = new Date(assetHolding.transactionDate);
                var dateString = date.toLocaleDateString();

                if (!dates.includes(dateString)) {
                    dates.push(dateString);
                }

                if (assetHolding.transactionType === 0) {
                    cumulativeSum += assetHolding.price;
                } else {
                    cumulativeSum -= assetHolding.price;
                }

                cumulativeContributions.push(cumulativeSum);
            });

            // Create the chart
            var ctx = document.getElementById(elementId).getContext('2d');
            var chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: dates,
                    datasets: [{
                        label: 'Cumulative Contributions',
                        data: cumulativeContributions,
                        borderColor: 'rgba(75, 192, 192, 1)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderWidth: 2,
                        pointBackgroundColor: 'rgba(75, 192, 192, 1)',
                        pointBorderColor: 'rgba(75, 192, 192, 1)'
                    }]
                },
                options: {
                    scales: {
                        x: {
                            display: true,
                            title: {
                                display: true,
                                text: 'Transaction Date'
                            }
                        },
                        y: {
                            display: true,
                            title: {
                                display: true,
                                text: 'Cumulative Contributions (USD)'
                            }
                        }
                    }
                }
            });
        }

        @{
            int index = 0;
            foreach (var item in Model)
            {
                var chartElementId = $"cumulativeContributionsChart-{item.Id}";
                var assetHoldingsData = Json.Serialize(simpleAssetHoldingsList.ElementAt(index));

                <text>
                    generateCumulativeContributionsChart('@chartElementId', @assetHoldingsData);
                </text>

                index++;
            }
        }
    </script>
}
