@using PortfolioMaster.Models.ViewModels;
@model PreciousMetalsViewModel
@{
    ViewData["Title"] = "Precious Metals";
    var editButtonStyle = "btn btn-sm btn-primary";
    var deleteButtonStyle = "btn btn-sm btn-danger";
    decimal goldPrice = ViewBag.GoldPrice;
    decimal silverPrice = ViewBag.SilverPrice;

    decimal totalQuantity = Model.PreciousMetalsHoldings.Sum(group => group.Sum(h => h.AssetHoldings.Where(hh => hh.TransactionType == TransactionType.Purchase).Sum(hh => hh.Quantity) - h.AssetHoldings.Where(hh => hh.TransactionType == TransactionType.Sale).Sum(hh => hh.Quantity)));
    decimal totalPurchasePrice = Model.PreciousMetalsHoldings.Sum(group => group.Sum(h => h.AssetHoldings.Sum(hh => hh.TransactionType == TransactionType.Purchase ? hh.Price : -hh.Price)));
    decimal totalValue = Model.PreciousMetalsHoldings.Sum(group => group.Sum(h => h.TotalValue));
    decimal totalPL = totalValue - totalPurchasePrice;
    decimal totalPercentage = totalPurchasePrice != 0 ? (totalPL / totalPurchasePrice) * 100 : 0;
}

<h1>@ViewData["Title"]</h1>

<div class="container">
    <table class="table">
        <thead>
            <tr>
                <th>Metal</th>
                <th>Total Quantity (Oz)</th>
                <th>Total Cashflow (USD)</th>
                <th>Current Price per Oz (USD)</th>
                <th>Total Value (USD)</th>
                <th style="color: @(totalPL < 0 ? "red" : "green")">P/L (USD)</th>
                <th style="color: @(totalPL < 0 ? "red" : "green")">P/L (%)</th>
            </tr>
        </thead>
        <tbody>
            @{
                var simpleAssetHoldingsList = Model.PreciousMetalsHoldings.SelectMany(holdingList => holdingList.Select(item => item.AssetHoldings.Select(h => new
                {
                    transactionDate = h.TransactionDate,
                    transactionType = h.TransactionType,
                    price = h.Price
                }).ToList()));
            }
            @foreach (var holdingList in Model.PreciousMetalsHoldings)
            {
                @foreach (var goldHolding in holdingList)
                {
                    @await Html.PartialAsync("_PreciousMetalTable", goldHolding)
                }
            }
        </tbody>
        <tfoot>
            <tr class="border-bottom bg-light font-weight-bold">
                <td>
                    <div>Total</div>
                </td>
                <td>@Html.DisplayFor(_ => totalQuantity)</td>
                <td>$@Html.DisplayFor(_ => totalPurchasePrice)</td>
                <td>n/a</td>
                <td>$@Html.DisplayFor(_ => totalValue)</td>
                <td style="color: @(totalPL < 0 ? "red" : "green");">$@Html.DisplayFor(_ => totalPL)</td>
                <td style="color: @(totalPercentage < 0 ? "red" : "green");">@totalPercentage.ToString("0.00")%</td>
            </tr>
        </tfoot>
    </table>

    <!-- Add the footnote with gold and silver prices -->
    <div>
        <p>
            <strong>Gold Price per Oz:</strong> $@Html.DisplayFor(_ => goldPrice)
        </p>
        <p>
            <strong>Silver Price per Oz:</strong> $@Html.DisplayFor(_ => silverPrice)
        </p>
    </div>
</div>


@section Scripts {
    <script>
        function toggleRow(chevron) {
            const icon = chevron.querySelector(".chevron-icon");
            icon.classList.toggle("rotate");
        }
        function submitUpdate(id, name) {
            var changedName = document.getElementById('name-' + id).value;
            var interestRate = document.getElementById('interestRate-' + id).value;
            var totalValue = document.getElementById('totalValue-' + id).value;

            document.getElementById('hiddenId').value = id;
            document.getElementById('hiddenName').value = changedName;
            document.getElementById('hiddenInterestRate').value = interestRate;
            document.getElementById('hiddenTotalValue').value = totalValue;
            document.getElementById('hiddenAssetHoldings').value = {};
            document.getElementById('updateForm').submit();
        }
        function generateCumulativeContributionsChart(elementId, assetHoldings) {
            // Prepare data for the chart
            assetHoldings.sort((a, b) => new Date(a.transactionDate) - new Date(b.transactionDate));

            var dates = [];
            var cumulativeContributions = [];
            var cumulativeSum = 0;

            assetHoldings.forEach(assetHolding => {
                var date = new Date(assetHolding.transactionDate);
                var dateString = date.toLocaleDateString();

                if (!dates.includes(dateString)) {
                    dates.push(dateString);
                }

                if (assetHolding.transactionType === 0) {
                    cumulativeSum += assetHolding.price;
                } else {
                    cumulativeSum -= assetHolding.price;
                }

                cumulativeContributions.push(cumulativeSum);
            });

            // Create the chart
            var ctx = document.getElementById(elementId).getContext('2d');
            var chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: dates,
                    datasets: [{
                        label: 'Cumulative Contributions',
                        data: cumulativeContributions,
                        borderColor: 'rgba(75, 192, 192, 1)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderWidth: 2,
                        pointBackgroundColor: 'rgba(75, 192, 192, 1)',
                        pointBorderColor: 'rgba(75, 192, 192, 1)'
                    }]
                },
                options: {
                    scales: {
                        x: {
                            display: true,
                            title: {
                                display: true,
                                text: 'Transaction Date'
                            }
                        },
                        y: {
                            display: true,
                            title: {
                                display: true,
                                text: 'Cumulative Contributions (USD)'
                            }
                        }
                    }
                }
            });
        }

        @{
            int index = 0;
            foreach (var holdingList in Model.PreciousMetalsHoldings)
            {
                foreach (var item in holdingList)
                {
                    var chartElementId = $"cumulativeContributionsChart-{item.Asset.Id}";
                    var assetHoldingsData = Json.Serialize(simpleAssetHoldingsList.ElementAt(index));

                    <text>
                        generateCumulativeContributionsChart('@chartElementId', @assetHoldingsData);
                    </text>

                    index++;
                }
            }
        }
    </script>
}

