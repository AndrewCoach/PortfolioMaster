@model PortfolioMaster.Models.ViewModels.PortfolioIndexViewModel

@{
    ViewData["Title"] = "Portfolios";
}

<h1>Portfolios</h1>

<table id="portfoliosTable" class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>Name</th>
            <th>Total Value</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var portfolio in Model.Portfolios)
        {
            <tr>
                <td>@portfolio.Name</td>
                <td>$@Html.DisplayFor(_ => portfolio.TotalValue)</td>
                <td>
                    <a asp-action="Edit" asp-route-id="@portfolio.Id" class="btn btn-primary btn-sm">Edit</a>
                    <a asp-action="Delete" asp-route-id="@portfolio.Id" class="btn btn-danger btn-sm">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<div>
    <label for="portfolioSelector">Select a portfolio:</label>
    <select id="portfolioSelector" class="form-control">
        @foreach (var portfolio in Model.Portfolios)
        {
            <option value="@portfolio.Id">@portfolio.Name</option>
        }
    </select>
</div>

@if (Model.Portfolios.Count > 0)
{
    await Html.RenderPartialAsync("_PortfolioGraphPartial", Model.Portfolios.FirstOrDefault(p => p.Id == Model.SelectedPortfolioId));
}
else
{
    <p>No portfolios found.</p>
}


<a asp-action="Create" class="btn btn-success">Add Portfolio</a>

@section Scripts {
    <script src="https://cdn.datatables.net/1.11.4/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.4/js/dataTables.bootstrap5.min.js"></script>

    <script>
        $(document).ready(function () {
            $('#portfoliosTable').DataTable({
                "order": [[0, "asc"]],
                "pageLength": 10,
                "searching": true,
                "lengthChange": true,
            });
        });
    </script>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script>
        async function fetchPortfolioData(portfolioId) {
            const response = await fetch(`@Url.Action("GetPortfolioData", "Portfolio")/${portfolioId}`);
            const data = await response.json();
            return data;
        }

        async function renderPortfolioGraph(portfolioId) {
            const data = await fetchPortfolioData(portfolioId);

            const trace = {
                x: data.map(d => d.date),
                y: data.map(d => d.value),
                mode: 'lines',
                line: { shape: 'linear' }
            };

            const layout = {
                title: 'Portfolio Intrinsic Value over Time',
                xaxis: { title: 'Date' },
                yaxis: { title: 'Value (USD)' }
            };

            Plotly.newPlot('portfolioGraph', [trace], layout);
        }

        // Initial rendering of the graph
        renderPortfolioGraph(@Model.SelectedPortfolioId);

        // Update the graph when the portfolio is changed
        document.getElementById('portfolioSelector').addEventListener
                ('change', (event) => {
            const selectedPortfolioId = event.target.value;
            renderPortfolioGraph(selectedPortfolioId);
        });
    </script>
}
